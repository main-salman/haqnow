 I want to build an app that allows people from all over the world to upload PDFs and any other image or document type related to Freedom Of Information (FOI/FOIA) documents. There should be an administrator backend that allows the administrator to approve which documents end up appearing on the website. The documents should appear by country and then by state/province. There should be a "federal/national" section available as an option for each country as well. All documents uploaded should go through OCR. All documents on the entire website should be searchable. Tags should be generated for all documents based on the words in the documents and documents should also be searchable by tags. When documents come up in a search, there should be an option to preview the document and also option to download the document. The front end user facing GUI should look modern and simple/easy to use. Any user on the internet should be able to add tags to each document up to 1000 tags per document in total. The documents should then be searchable not only using tags in the document but aso text in the document. When searches are done, documents should be listed by country in the order of the most number of documents matching per country, with the highest number of documents on top. There should be a word heat map from the words both in tags as well as the words in the documents. The administrator should have the ability to permanently ban use of specific tags. Any user should be able to upload Freedom of Information documents, no login required. Some basic captcha and rate limiting should be done to avoid abuse. 

 I already built this app in service call databutton.com which has most of the functionality, but I want to migrate it to exoscale.com. The code for the existing app is in the frontend and backend folders. The code needs to be modified to remove databutton.com proprietary components and replace them with other industry standard components


I want to eventually deploy this application on Exoscale, creds are in @.env file. I want to use terraform to deploy it. 


The PDF, images, documents files should be stored in an exoscale bucket already defined in @.env file

the databutton app was using supabase for database - replace that with a mysql database and object storage with Exoscale object storage as defined in .env file. Make it easy for me to test this application locally and also push it to exoscale instance and db and object storage. Use exoscale API to built the instance, db and use existing object storage bucket defined in .env file. Both the local and instance deployed version should use the exoscale DB and exoscale object storage.


Here are 20 important questions to clarify before building your FOI document app:

1. **User Roles & Permissions**
   - Should there be any user accounts or roles beyond “admin” and “anonymous user”? (e.g., moderators, power users, etc.)

2. **Admin Backend**
   - What specific features do you want in the admin backend besides document approval and tag banning? (e.g., analytics, user management, audit logs)

3. **Document Approval Workflow**
   - Should admins be able to edit or redact documents before approval, or only approve/reject?

4. **Document Metadata**
   - What metadata should be captured for each document? (e.g., upload date, uploader IP, document title, description, etc.)

5. **Country/State/Province Data**
   - Do you have a source or list for all countries and their states/provinces, or should we use a standard dataset?

6. **Federal/National Section**
   - Should every country have a “federal/national” section by default, or only some?

7. **OCR Processing**
   - Is there a preferred OCR engine (e.g., Tesseract, AWS Textract, Google Vision), or should we choose the best fit?

8. **Search Functionality**
   - Should search support advanced features (e.g., boolean operators, phrase search, filters by date, etc.)?

9. **Tagging System**
   - Should tags be free-form, or do you want to suggest tags or have a controlled vocabulary?

10. **Tag Moderation**
    - How should banned tags be handled for existing documents? (e.g., removed automatically, flagged for review)

11. **Document Preview**
    - What kind of preview do you want? (e.g., first page image, embedded PDF viewer, text snippet)

12. **Download Options**
    - Should downloads be rate-limited or require captcha, or is this only for uploads?

13. **Word Heat Map**
    - Should the heat map be per-document, per-country, or global? How should it be visualized?

14. **Rate Limiting & Abuse Prevention**
    - What upload/download limits do you want per IP or per time period?

15. **Captcha**
    - Do you have a preferred captcha provider (e.g., Google reCAPTCHA, hCaptcha), or should we choose?

16. **File Size & Type Limits**
    - What is the maximum PDF file size allowed? Should we restrict to PDF only?

17. **Storage & Retention**
    - Should documents ever expire or be deleted, or are they permanent unless removed by admin?

18. **Search Indexing**
    - Should the search index update immediately after upload/approval, or on a schedule?

19. **Notifications**
    - Should admins receive notifications (email, dashboard) for new uploads or flagged content?

20. **Internationalization**
    - Should the app support multiple languages, or is English-only sufficient for now?

Let me know your answers or if you want to discuss any of these in more detail!



1. no 2. keep it to approval and banning tags only 3. only approve/reject 4. all of these - but description should be options 5. @countriesData.ts 6. all 7. tesseract 8. no 9. free-form 10. there are no existing documents 11. embedded pdf viewer 12. both should be rate limited, one document every 2 min, there should be a visibile warning when rate limit is reached 13. use any existing library to do this - anything that's simple to implement 14. one document per ip per 2 min 15. no 16. any type of document should be allowed - max 100 mb 17. no 18. upon approval 19. yes, email notification, email specified in .env file 20. english only to start - add french, german, spanish if it's easy - add whichever languages are easy.



	- Add an additional "Upload" below the search bar on the main page https://www.haqnow.com/
	- Map should show country names in English and native language (currently it's native language only)
	- Search is not working properly when clicking on countries in the list under the map - e.g. https://www.haqnow.com/search-page?q=United+States&country=United+States shows 0 documents even though there are 2
	- Increase font size in the list of countries under the map by 20%
	- Increase font size for "Global Corruption Document Distribution" by 20%
	- Consider moving "About" to be the first in the list/navigation bar
	- https://www.haqnow.com/foi both links at the bottom of this page are broken
	- Footer and Nav should remain same on all pages. "All Rights Reserved" should be at the bottom of every page
	- https://www.haqnow.com/privacy-guaranteed-page - arrows should be removed - users think they are clickable
	- https://www.haqnow.com/disclaimer - avoid red text on red, yellow on yellow, blue on blue - make the theme consistent throughout the website - let's do light-green background and white foreground on all pages. Improve the design for https://www.haqnow.com/about and other pages background and foreground are the same colour - should be different
Translations for https://www.haqnow.com/about and https://www.haqnow.com/foi are missing. They should also be available here https://www.haqnow.com/admin-translations-page to be editable. All content on the website should be editable on https://www.haqnow.com/admin-translations-page 




More:

If I search Iran, I get some resulst - but if I search Irani or Iranian, I don't get any results. https://www.haqnow.com/search-page?q=iranian - I thought the semantic search that was implemented would fix these types of issues. Also when people are searching, it would be great if there could be an autocomplete to help guide the users on what can be searched. Tell me about what free or open source options that can be implemented.


Users 4 feedback:
	- Who is funding this? - Funded personally by Salman Naqvi - costing around $25 USD per month
	- How can I fund it? - Add a Donate button
	- Don't display "Salman Naqvi" so prominently - explain why the name is there - there is no fun in hacking
	- Website is hosted in European servers across multiple countries in Europe
	- Show how HaqNow.com will prevent spamming
	- Love the FOIA page - there may be confusion between Sunshine Laws and FOIA laws
	- Privacy Guaranteed - need a non-techie explanation
	- I don't understand what are the priorities of this project - what's next? What's the plan here? When is it going to be available in Malawi?
	- Wikipedia is super easy to use - compare this against Wikipedia - how things are different
	- Non techie people don't care about open source code
	- Hi again - I can think of two US-based folks who may be very interested in and aligned with what you're doing. The first is the Daily Beans podcast, here. The second is YK Hong, here. There is nothing urgent about this, rather I'm sending it just in case you're keeping a list.

User 5 feedback:
	- Decide what the name of the platform is - HaqNow or HaqNow.com - HaqNow alone is better - change all mentions of HaqNow.com in database to HaqNow and don't call it a platform
	- "HaqNow is a dedicated to collecting"
	- Likes the map
	- Likes the order of countries
	- Make the list of countries drop down
	- Add a picture and short bio
	- Add more faces and affiliations
	- Add TOC to about page
	- Upload page: Description word limit 500 characters
	- Make State/Province/Region
	- Admin Level: Change it to a checkbox
	- Change FOI to Freedom Of Information
	- FOI Page: get rid of FOI Info
	- FOI Page: alphabetize countries
	- FOI page: move best practices up
	- Privacy Guarantee to Privacy Features
	- Privacy Guarantee: get rid of Guarantee everywhere
	- Privacy G: What get's removed - move that section up
	- Privacy G: Maximum protection -  
	- Disclaimer and FAQ: change to Security and FAQ
	- Assume everyone in the target userbase is completely ignorant
	- In the upload page, have a link to Disclaimer and FAQ page on top - 
	- Change name of Disclaimer and FAQ to "Security and FAQ"
	- Q2: Can my government track me if I upload documents? - mention public libraries
	- Get a lawyer to take a look at this page
Upload page: Remove this: By submitting, you confirm that this document exposes legitimate corruption and that you have the right to share it anonymously.




🤔 10 Questions to Optimize Your Setup
What information do you find yourself repeatedly explaining? (e.g., "the AI search uses PostgreSQL RAG database at this URL", "deploy with ./deploy.sh", etc.)
What are your most common conversation starters? (e.g., "fix this bug", "add this feature", "deploy changes", "debug performance issue")
Which file paths/locations do you reference most often? (e.g., backend/app/services/rag_service.py, .env locations, deployment scripts)
How detailed should component explanations be? Do you want just "RAG uses PostgreSQL + Ollama" or full architectural flow diagrams in text?
Do you work on different types of tasks that need different context? (e.g., frontend React work vs backend RAG vs deployment vs debugging)
What's missing from the current README that you find yourself explaining? The README looks comprehensive - what gaps do you notice?
How important are the current environment details? (MySQL vs PostgreSQL, Exoscale setup, specific URLs/credentials patterns)
Do you need workflow-specific guidance? (e.g., "when fixing AI performance, always check X, Y, Z first")
Should this be just for you, or do you have team members who'd benefit? (affects whether to focus on .cursorrules vs documentation)
Do you prefer one comprehensive file or multiple focused files? (e.g., ARCHITECTURE.md, DEPLOYMENT.md, DEBUGGING.md vs one CURSOR_CONTEXT.md)
Based on your answers, I can recommend the optimal combination of:
Enhanced .cursorrules for Cursor-specific behavior
Focused context files for different workflows
README improvements vs separate reference docs
Cursor workspace configuration optimizations
What's your biggest pain point right now when starting new chats?
1. I keep telling cursor to use the env file in the repo root directory - ,keep reminding that we are using exoscale hosted dbaas databases, and I keep seeing it search for the same few things like locations of key app files and functions over and over again 2. add feature followed by fix bug - I want to leave deploying changes to deploy.sh - deploy.sh is supposed to commit the changes to git, then log into the server, pull changes from git, and redeploy services, but, cursor keeps repeating some of the tasks that deploy.sh is supposed to do in addition to that 3. i don't know 4. whatever is sufficient for cursor - so that it's not using too many tokens searching, but, not too little either so that it has to spend tokens figuring things out 5. no 6. locations of key files is missing - but is readme.md even useful? or does cursor need a different type of file? 7. they are all in .env file and they should always be referenced - deploy.sh makes sure that .env file remains in sync between server and local development workstation - .env is not in git, and part of gitingore as it containts all credentials - all credentials should be always stored in .env file 8. always use deploy.sh to deploy new changes - let deploy do the git commands, restart services, etc. if anything like that that's done over and over again, it should be added to deploy.sh 9. I have team members as well 10. different files are okay - may be let's move all the scripts to scripts folder (create it) and move all the documentation to documentation folder - and create the appropriate focused files. Cursor seems to be doing similar debugging commands over and over again.